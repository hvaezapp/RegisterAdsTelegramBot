// <auto-generated />
using System;
using MehranBot.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MehranBot.Migrations
{
    [DbContext(typeof(MehranBotDbContext))]
    partial class MehranBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MehranBot.Models.Entities.Ads", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkCategoryId")
                        .HasColumnType("int");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkCategoryId");

                    b.HasIndex("FkUserId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("AdminChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdminUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AdvertiseFee")
                        .HasColumnType("bigint");

                    b.Property<string>("BotToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("RulesMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartBotText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetChannelUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WelcomeMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedRules")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMembership")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<byte>("StepCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkUserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.UserPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateMl")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateSh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FkAdsId")
                        .HasColumnType("bigint");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<string>("RefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkAdsId");

                    b.HasIndex("FkUserId");

                    b.ToTable("UserPayment");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.Ads", b =>
                {
                    b.HasOne("MehranBot.Models.Entities.Category", "Category")
                        .WithMany("Ads")
                        .HasForeignKey("FkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MehranBot.Models.Entities.User", "User")
                        .WithMany("Ads")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.UserActivity", b =>
                {
                    b.HasOne("MehranBot.Models.Entities.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.UserPayment", b =>
                {
                    b.HasOne("MehranBot.Models.Entities.Ads", "Ads")
                        .WithMany()
                        .HasForeignKey("FkAdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MehranBot.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ads");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.Category", b =>
                {
                    b.Navigation("Ads");
                });

            modelBuilder.Entity("MehranBot.Models.Entities.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("UserActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
